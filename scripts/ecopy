#!/bin/bash

TOPDIR=$(realpath $(dirname $0)/..)

# sync gentoo repository
${TOPDIR}/scripts/sync-gentoo-cache

CACHE_PATH="${CACHE_PATH:-${HOME}/cache/gentoo-portage}"

source "/etc/init.d/functions.sh"

if ! type -P ekeyword > /dev/null ; then
	ewarn "This script requires the use of ekeyword, please emerge"
	ewarn "app-portage/gentoolkit-dev to continue."
	exit 1
fi

if ! type -P wget > /dev/null ; then
	ewarn "This script requires the use of wgets, please emerge"
	ewarn "net-misc/wget to continue."
	exit 1
fi

if [[ -z ${1} ]] ; then
	einfo
	einfo "usage: ecopy <category>/<package>"
	einfo "- you can also specify a specific version, using the '=' prefix"
	einfo "and appending a version"
	einfo
	einfo "ecopy is a best effort script only. It doesn't guarantee a working"
	einfo "result"
	exit 0
fi

# mangle user input
catpkg="${1#=}"
catpkg="${catpkg%-[0-9]*}"

read CATEGORY PN PVR < <(
export ACCEPT_KEYWORDS="amd64 ~amd64 x86 ~x86"
eix --cache-file ${TOPDIR}/eix.cache.gentoo \
	--exact \
	--nocolor \
	--pure-packages \
	--format "<category> <name> <bestversion:VERSION>\n" \
	${catpkg}
)

if [[ ${1:0:1} == "=" ]]; then
	PVR="${1#=${catpkg}-}"
fi

ebuild="${PN}-${PVR}.ebuild"

einfo "Found atom ${CATEGORY}/${PN}-${PVR}"
einfo "Fetching files from ${CACHE_PATH} ..."

# create ebuild directory
mkdir -p "${TOPDIR}/${catpkg}"
pushd "${TOPDIR}/${catpkg}" > /dev/null

# (re)fetch metadata.xml
cp "${CACHE_PATH}/${catpkg}/metadata.xml" "metadata.xml"

# get the ebuild
cp "${CACHE_PATH}/${catpkg}/${ebuild}" "${ebuild}"

# get the patches. assumed that every patch has FILESDIR in the line.
for i in $(eval echo $(grep FILESDIR ${ebuild} | sed -e 's:.*FILESDIR[}"]*/::' -e 's:"::g' -e "s:'::" -e "s:#.*::" -e "s: .*::")); do
	mkdir -p "files/$(dirname ${i})"
	cp "${CACHE_PATH}/${catpkg}/files/${i}" "files/${i}"
done

# force the user's keyword on the ebuild. Less work for the user.
einfo "Setting keywords to amd64/x86 only ..."
ekeyword ^all amd64 x86 ${ebuild} >/dev/null

# clean CVS headers
sed -i -e '3d' ${ebuild}
sed -i -e '2a# $Header: $' ${ebuild}

# update manifest for changes made to the ebuild above
einfo "Updating metadata ..."
${TOPDIR}/scripts/sync-local-cache

einfo
einfo "Running repoman to check for QA problems ..."
repoman full
