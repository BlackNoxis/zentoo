#!/bin/bash

# original version taken from prefix overlay

RSURL=${RSURL:-"http://tinderbox.dev.gentoo.org/portage"}
WGET_CMD="wget --no-verbose --no-glob --no-clobber"

source "/etc/init.d/functions.sh"

if ! type -P qatom > /dev/null ; then
	ewarn "This script requires the use of qatom, please emerge"
	ewarn "app-portage/portage-utils to continue."
	exit 1
fi

if ! type -P ekeyword > /dev/null ; then
	ewarn "This script requires the use of qatom, please emerge"
	ewarn "app-portage/gentoolkit-dev to continue."
	exit 1
fi

if ! type -P wget > /dev/null ; then
	ewarn "This script requires the use of wgets, please emerge"
	ewarn "net-misc/wget to continue."
	exit 1
fi

if [[ -z ${1} ]] ; then
	einfo
	einfo "usage: ecopy <category>/<package>"
	einfo "- make sure you call ecopy from the root of the overlay"
	einfo "- you can also specify a specific version, using the '=' prefix"
	einfo "and appending a version"
	einfo
	einfo "ecopy is a best effort script only. It doesn't guarantee a working"
	einfo "result"
	exit 0
fi

# Uses qatom to determine if the second atom is greater than the first, and
# returns true if so.
is_greater_atom() {
	if [[ $(qatom -c $1 $2 | awk '{print $2}') == "<" ]]; then
		return 0
	else
		return 1
	fi
}

# Takes input of a list of ebuild strings and uses is_greater_atom() to return
# the greatest in the list.
return_greatest() {
	# Append '-0_alpha' to the end of the name such that any version is greater
	# than it. bug #278113
	max="${catpkg#*\/}-0_alpha"
	for i in $@; do
		if is_greater_atom $max $i; then
			max="${i}"
		fi
	done
	echo $max
}

# Either use qatom or fall back to a non-qatom approach which may generate false
# positive.
return_greatest_wrapper() {
	echo "$( return_greatest "$( \
	wget -q "${RSURL}/${catpkg}" -O - | \
	egrep --color=never "href=\"[^\"]+\.ebuild\"" -o | \
	egrep -v 9999 | \
	sed -e 's/^href="//' -e 's/"$//' -e 's/%2b/+/g' )" )"
}

# Mangle user input
if [[ ${1:0:1} == "=" ]] ; then # Check to see if the first char is an "="
	ebuildgrep="${1#*\/}.ebuild"
	catpkg="${1#=}"       # Strip the leading "="
	catpkg="${catpkg%-[0-9]*}" # Strip the trailing verion numbers
	# Grab the index from the current $RSURL and parse it for the list
	# of ebuilds.  Grab the specified version that the user entered.
	ebuild="$(wget -q "${RSURL}/${catpkg}" -O - | \
		grep --color=never -F $ebuildgrep -o | head -n1)"
else
	catpkg="$1"
	# Use the wrapper function to just grab the latest version.
	ebuild="$( return_greatest_wrapper )"
fi

# TODO: fix error checking. patches welcome.
# Error checking.
if [[ -z ${ebuild} ]] ; then
	ewarn "please specify a correct specific version"
	[[ ${1:0:1} == "=" ]] \
		&& ewarn "$1 doesn't match an existing ebuild in the tree" \
		|| ewarn "example: =$1-0.2.3"
	exit -1
else
	einfo "Found atom ${ebuild}"
fi

einfo "Downloading files ..."

if [[ ! -d ${catpkg} ]]; then 
	mkdir -p "${catpkg}" && cd "$catpkg"
	${WGET_CMD} "${RSURL}/$catpkg/metadata.xml"
else
	cd "$catpkg"
fi

# get the ebuild
${WGET_CMD} "${RSURL}/${catpkg}/${ebuild}"

# needed for sourcing ebuild and understanding ebuild specific vars.
PF="${ebuild/.ebuild}"
P="${PF%-r[1-9]*}"
PN="${P%-*}"
PV="${P/${PN}-}"

source ${ebuild} 2> /dev/null # get rid of "inherit: command not found" message.

# get the patches. assumed that every patch has FILESDIR in the line.
for i in $(eval echo $(grep FILESDIR $ebuild | sed -e 's:.*FILESDIR[}"]*/::' -e 's:"::g' -e "s:'::" -e "s:#.*::" -e "s: .*::")); do
	mkdir -p "files"
	${WGET_CMD} -P "files" "${RSURL}/$catpkg/files/$i"
done

# force the user's keyword on the ebuild. Less work for the user.
einfo "Setting keywords to amd64/x86 only ..."
ekeyword ^all amd64 x86 $ebuild >/dev/null

# clean CVS headers
sed -i -e '3d' $ebuild
sed -i -e '2a# $Header: $' $ebuild

# update manifest for changes made to the ebuild above
einfo "Updating Manifest ..."
repoman manifest

einfo
einfo "Running repoman to check for QA problems ..."
repoman full
