commit 1f556a9f3131a58f1d561d588b055475e0f3f6de
Author: Benedikt BÃ¶hm <bb@xnull.de>
Date:   Thu Apr 11 09:20:04 2013 +0200

    make portage way more silent

diff --git a/pym/_emerge/actions.py b/pym/_emerge/actions.py
index d6e8100..3dd23d9 100644
--- a/pym/_emerge/actions.py
+++ b/pym/_emerge/actions.py
@@ -392,6 +392,7 @@ def action_build(settings, trees, mtimedb,
 			print("Quitting.")
 			print()
 			return 128 + signal.SIGINT
+		print()
 		# Don't ask again (e.g. when auto-cleaning packages after merge)
 		if mergecount != 0:
 			myopts.pop("--ask", None)
@@ -454,7 +455,6 @@ def action_build(settings, trees, mtimedb,
 			if retval == os.EX_OK and \
 				not (buildpkgonly or fetchonly or pretend):
 				if "yes" == settings.get("AUTOCLEAN"):
-					portage.writemsg_stdout(">>> Auto-cleaning packages...\n")
 					unmerge(trees[settings['EROOT']]['root_config'],
 						myopts, "clean", [],
 						ldpath_mtimes, autoclean=1)
diff --git a/pym/_emerge/chk_updated_cfg_files.py b/pym/_emerge/chk_updated_cfg_files.py
index 9f2ab6f..4ebc41d 100644
--- a/pym/_emerge/chk_updated_cfg_files.py
+++ b/pym/_emerge/chk_updated_cfg_files.py
@@ -12,31 +12,4 @@ from portage.output import bold, colorize, yellow
 from portage.util import writemsg_level
 
 def chk_updated_cfg_files(eroot, config_protect):
-	target_root = eroot
-	result = list(
-		portage.util.find_updated_config_files(target_root, config_protect))
-
-	for x in result:
-		writemsg_level("\n %s " % (colorize("WARN", "* " + _("IMPORTANT:"))),
-			level=logging.INFO, noiselevel=-1)
-		if not x[1]: # it's a protected file
-			writemsg_level( _("config file '%s' needs updating.\n") % x[0],
-				level=logging.INFO, noiselevel=-1)
-		else: # it's a protected dir
-			if len(x[1]) == 1:
-				head, tail = os.path.split(x[1][0])
-				tail = tail[len("._cfg0000_"):]
-				fpath = os.path.join(head, tail)
-				writemsg_level(_("config file '%s' needs updating.\n") % fpath,
-					level=logging.INFO, noiselevel=-1)
-			else:
-				writemsg_level(
-					_("%d config files in '%s' need updating.\n") % \
-					(len(x[1]), x[0]), level=logging.INFO, noiselevel=-1)
-
-	if result:
-		print(" " + yellow("*") + " See the " +
-			colorize("INFORM", _("CONFIGURATION FILES")) +
-			" " + _("section of the") + " " + bold("emerge"))
-		print(" " + yellow("*") + " " +
-			_("man page to learn how to update config files."))
+	pass
diff --git a/pym/_emerge/depgraph.py b/pym/_emerge/depgraph.py
index 3e29508..2726ad8 100644
--- a/pym/_emerge/depgraph.py
+++ b/pym/_emerge/depgraph.py
@@ -7815,21 +7815,8 @@ def _spinner_start(spinner, myopts):
 			action = "built"
 		else:
 			action = "merged"
-		if "--tree" in myopts and action != "fetched": # Tree doesn't work with fetching
-			if "--unordered-display" in myopts:
-				portage.writemsg_stdout("\n" + \
-					darkgreen("These are the packages that " + \
-					"would be %s:" % action) + "\n\n")
-			else:
-				portage.writemsg_stdout("\n" + \
-					darkgreen("These are the packages that " + \
-					"would be %s, in reverse order:" % action) + "\n\n")
-		else:
-			portage.writemsg_stdout("\n" + \
-				darkgreen("These are the packages that " + \
-				"would be %s, in order:" % action) + "\n\n")
 
-	show_spinner = "--quiet" not in myopts and "--nodeps" not in myopts
+	show_spinner = False
 	if not show_spinner:
 		spinner.update = spinner.update_quiet
 
@@ -7846,7 +7833,7 @@ def _spinner_stop(spinner):
 		# so don't output backspaces in that case.
 		portage.writemsg_stdout("\b\b")
 
-	portage.writemsg_stdout("... done!\n")
+	portage.writemsg_stdout("... done!\n\n")
 
 def backtrack_depgraph(settings, trees, myopts, myparams, 
 	myaction, myfiles, spinner):
diff --git a/pym/_emerge/unmerge.py b/pym/_emerge/unmerge.py
index b46b89c..ef4858f 100644
--- a/pym/_emerge/unmerge.py
+++ b/pym/_emerge/unmerge.py
@@ -284,7 +284,6 @@ def _unmerge_display(root_config, myopts, unmerge_action,
 					# is protected, and the rest are selected
 		numselected = len(all_selected)
 		if global_unmerge and not numselected:
-			portage.writemsg_stdout("\n>>> No outdated packages were found on your system.\n")
 			return 1, {}
 	
 		if not numselected:
diff --git a/pym/portage/dbapi/bintree.py b/pym/portage/dbapi/bintree.py
index 77b2886..8f9c128 100644
--- a/pym/portage/dbapi/bintree.py
+++ b/pym/portage/dbapi/bintree.py
@@ -993,10 +993,6 @@ class binarytree(object):
 							_("Timed out while closing connection to binhost"),
 							noiselevel=-1)
 			except UseCachedCopyOfRemoteIndex:
-				writemsg_stdout("\n")
-				writemsg_stdout(
-					colorize("GOOD", _("Local copy of remote index is up-to-date and will be used.")) + \
-					"\n")
 				rmt_idx = pkgindex
 			except EnvironmentError as e:
 				writemsg(_("\n\n!!! Error fetching binhost package" \
diff --git a/pym/portage/news.py b/pym/portage/news.py
index 408fb5c..20e03d4 100644
--- a/pym/portage/news.py
+++ b/pym/portage/news.py
@@ -407,16 +407,4 @@ def display_news_notifications(news_counts):
 	Display a notification for unread news items, using a dictionary mapping
 	repos to integer counts, like that returned from count_unread_news().
 	"""
-	newsReaderDisplay = False
-	for repo, count in news_counts.items():
-		if count > 0:
-			if not newsReaderDisplay:
-				newsReaderDisplay = True
-				print()
-			print(colorize("WARN", " * IMPORTANT:"), end=' ')
-			print("%s news items need reading for repository '%s'." % (count, repo))
-
-	if newsReaderDisplay:
-		print(colorize("WARN", " *"), end=' ')
-		print("Use " + colorize("GOOD", "eselect news") + " to read news items.")
-		print()
+	pass
diff --git a/pym/portage/util/_info_files.py b/pym/portage/util/_info_files.py
index 0e3a210..d6ee64b 100644
--- a/pym/portage/util/_info_files.py
+++ b/pym/portage/util/_info_files.py
@@ -27,15 +27,7 @@ def chk_updated_info_files(root, infodirs, prev_mtimes):
 						prev_mtimes[inforoot] != infomtime:
 							regen_infodirs.append(inforoot)
 
-		if not regen_infodirs:
-			portage.util.writemsg_stdout("\n")
-			if portage.util.noiselimit >= 0:
-				out.einfo("GNU info directory index is up-to-date.")
-		else:
-			portage.util.writemsg_stdout("\n")
-			if portage.util.noiselimit >= 0:
-				out.einfo("Regenerating GNU info directory index...")
-
+		if regen_infodirs:
 			dir_extensions = ("", ".gz", ".bz2")
 			icount=0
 			badcount=0
@@ -133,6 +125,3 @@ def chk_updated_info_files(root, infodirs, prev_mtimes):
 					(icount, badcount))
 				portage.util.writemsg_level(errmsg,
 					level=logging.ERROR, noiselevel=-1)
-			else:
-				if icount > 0 and portage.util.noiselimit >= 0:
-					out.einfo("Processed %d info files." % (icount,))
